# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named Proxy_FileExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Proxy_FileExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.proxyFile"

def getLabel():
    return "Proxy_File"

def getVersion():
    return 1

def getIconPath():
    return "proxyfile_icon.png"

def getGrouping():
    return "Community/Merge"

def getPluginDescription():
    return "Creates Proxy File"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Control")
    param = lastNode.createChoiceParam("modeChose", "Mode")
    entries = [ ("preview", ""),
    ("write", ""),
    ("read", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Preview: to see how much down sample is needed. It does NOT create proxy.\n\nWrite: To write the proxy file, plug a wirte node with this node and in format type of the write node use \"Input Format\". Then write it in disc.\n\nRead: Use the File path and choose the project format. use custom frame rate and colorspace if necessary.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.modeChose = param
    del param

    param = lastNode.createBooleanParam("ProxyFormatuseRoD", "Use Source RoD")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.ProxyFormatuseRoD = param
    del param

    param = lastNode.createDouble2DParam("ProxyFormatreformatScale", "Proxy Scale")
    param.setDisplayMinimum(0.1, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0.1, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.ProxyFormatreformatScale = param
    del param

    param = lastNode.createBooleanParam("ProxyFormatreformatScaleUniform", "Uniform")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Use the X scale for both directions")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.ProxyFormatreformatScaleUniform = param
    del param

    param = lastNode.createFileParam("ProxyReadfilename", "File")
    param.setSequenceEnabled(True)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.ProxyReadfilename = param
    del param

    param = lastNode.createSeparatorParam("br2", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.br2 = param
    del param

    param = lastNode.createChoiceParam("ProxyUnformatreformatType", "Type")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.ProxyUnformatreformatType = param
    del param

    param = lastNode.createChoiceParam("ProxyUnformatNatronParamFormatChoice", "To Format")
    param.setDefaultValue(6)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.ProxyUnformatNatronParamFormatChoice = param
    del param

    param = lastNode.createInt2DParam("ProxyUnformatboxSize", "To Box Size")
    param.setDefaultValue(200, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(200, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.ProxyUnformatboxSize = param
    del param

    param = lastNode.createBooleanParam("ProxyUnformatboxFixed", "Force This Shape")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.ProxyUnformatboxFixed = param
    del param

    param = lastNode.createDoubleParam("ProxyUnformatboxPar", "Pixel Aspect Ratio")
    param.setMinimum(0, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(0.5, 0)
    param.setDisplayMaximum(2, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.ProxyUnformatboxPar = param
    del param

    param = lastNode.createDouble2DParam("ProxyUnformatreformatScale", "To Scale")
    param.setDisplayMinimum(0.1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0.1, 1)
    param.setDisplayMaximum(10, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.ProxyUnformatreformatScale = param
    del param

    param = lastNode.createBooleanParam("ProxyUnformatreformatScaleUniform", "Uniform")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.ProxyUnformatreformatScaleUniform = param
    del param

    param = lastNode.createSeparatorParam("br", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.br = param
    del param

    param = lastNode.createBooleanParam("useproxyFile", "Use Proxy File")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Checking it will use Proxy File")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.useproxyFile = param
    del param

    param = lastNode.createSeparatorParam("linebr", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.linebr = param
    del param

    param = lastNode.createChoiceParam("ProxyReadfilePremult", "File Premult")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.ProxyReadfilePremult = param
    del param

    param = lastNode.createChoiceParam("ProxyReadoutputPremult", "Output Premult")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.ProxyReadoutputPremult = param
    del param

    param = lastNode.createChoiceParam("ProxyReadoutputComponents", "Output Components")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.ProxyReadoutputComponents = param
    del param

    param = lastNode.createDoubleParam("ProxyReadframeRate", "Frame rate")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(300, 0)
    param.setDefaultValue(24, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.ProxyReadframeRate = param
    del param

    param = lastNode.createBooleanParam("ProxyReadcustomFps", "Custom FPS")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.ProxyReadcustomFps = param
    del param

    param = lastNode.createChoiceParam("ProxyReadocioInputSpaceIndex", "File Colorspace")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(True)
    lastNode.ProxyReadocioInputSpaceIndex = param
    del param

    param = lastNode.createChoiceParam("ProxyReadocioOutputSpaceIndex", "Output Colorspace")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(True)
    lastNode.ProxyReadocioOutputSpaceIndex = param
    del param

    lastNode.credit = lastNode.createPageParam("credit", "credit")
    param = lastNode.createSeparatorParam("name", "Developed by Fahad Hasan Pathik (CGVIRUS)")

    # Add the param to the page
    lastNode.credit.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.name = param
    del param

    param = lastNode.createSeparatorParam("sp1", "")

    # Add the param to the page
    lastNode.credit.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sp1 = param
    del param

    param = lastNode.createSeparatorParam("sp2", "")

    # Add the param to the page
    lastNode.credit.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sp2 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Settings', 'userNatron', 'credit', 'Node'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "ProxyUnformat"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("ProxyUnformat")
    lastNode.setLabel("ProxyUnformat")
    lastNode.setPosition(551, 298)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupProxyUnformat = lastNode

    param = lastNode.getParam("useRoD")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("format")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    del lastNode
    # End of node "ProxyUnformat"

    # Start of node "SwitchProxy"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("SwitchProxy")
    lastNode.setLabel("SwitchProxy")
    lastNode.setPosition(964, 28)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitchProxy = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "SwitchProxy"

    # Start of node "ProxyFormat"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("ProxyFormat")
    lastNode.setLabel("ProxyFormat")
    lastNode.setPosition(536, 97)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupProxyFormat = lastNode

    param = lastNode.getParam("useRoD")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("scale")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("boxFixed")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("reformatScale")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        del param

    del lastNode
    # End of node "ProxyFormat"

    # Start of node "ProxyRead"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("ProxyRead")
    lastNode.setLabel("ProxyRead")
    lastNode.setPosition(156, 275)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupProxyRead = lastNode

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ProxyRead"

    # Start of node "Source"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Source")
    lastNode.setLabel("Source")
    lastNode.setPosition(262, 97)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSource = lastNode

    del lastNode
    # End of node "Source"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1139, 29)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "ifFormatOrRead"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("ifFormatOrRead")
    lastNode.setLabel("ifFormatOrRead")
    lastNode.setPosition(366, 298)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupifFormatOrRead = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "ifFormatOrRead"

    # Start of node "mainSwitch"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("mainSwitch")
    lastNode.setLabel("mainSwitch")
    lastNode.setPosition(788, 298)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupmainSwitch = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "mainSwitch"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(303, 37)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(708, 351)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(708, 269)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Now that all nodes are created we can connect them together, restore expressions
    groupProxyUnformat.connectInput(0, groupifFormatOrRead)
    groupSwitchProxy.connectInput(0, groupDot1)
    groupSwitchProxy.connectInput(1, groupmainSwitch)
    groupProxyFormat.connectInput(0, groupSource)
    groupOutput1.connectInput(0, groupSwitchProxy)
    groupifFormatOrRead.connectInput(0, groupProxyFormat)
    groupifFormatOrRead.connectInput(2, groupProxyRead)
    groupmainSwitch.connectInput(0, groupDot2)
    groupmainSwitch.connectInput(1, groupProxyFormat)
    groupmainSwitch.connectInput(2, groupDot3)
    groupDot1.connectInput(0, groupSource)
    groupDot2.connectInput(0, groupProxyUnformat)
    groupDot3.connectInput(0, groupProxyUnformat)

    param = groupProxyUnformat.getParam("useRoD")
    param.slaveTo(groupProxyFormat.getParam("useRoD"), 0, 0)
    del param
    param = groupProxyUnformat.getParam("reformatType")
    group.getParam("ProxyUnformatreformatType").setAsAlias(param)
    del param
    param = groupProxyUnformat.getParam("NatronParamFormatChoice")
    group.getParam("ProxyUnformatNatronParamFormatChoice").setAsAlias(param)
    del param
    param = groupProxyUnformat.getParam("boxSize")
    group.getParam("ProxyUnformatboxSize").setAsAlias(param)
    del param
    param = groupProxyUnformat.getParam("boxFixed")
    group.getParam("ProxyUnformatboxFixed").setAsAlias(param)
    del param
    param = groupProxyUnformat.getParam("boxPar")
    group.getParam("ProxyUnformatboxPar").setAsAlias(param)
    del param
    param = groupProxyUnformat.getParam("reformatScale")
    group.getParam("ProxyUnformatreformatScale").setAsAlias(param)
    del param
    param = groupProxyUnformat.getParam("reformatScaleUniform")
    group.getParam("ProxyUnformatreformatScaleUniform").setAsAlias(param)
    del param
    param = groupSwitchProxy.getParam("which")
    param.setExpression("thisGroup.useproxyFile.get()", False, 0)
    del param
    param = groupProxyFormat.getParam("useRoD")
    group.getParam("ProxyFormatuseRoD").setAsAlias(param)
    del param
    param = groupProxyFormat.getParam("reformatScale")
    group.getParam("ProxyFormatreformatScale").setAsAlias(param)
    del param
    param = groupProxyRead.getParam("filename")
    group.getParam("ProxyReadfilename").setAsAlias(param)
    del param
    param = groupProxyRead.getParam("proxy")
    param.slaveTo(group.getParam("ProxyReadfilename"), 0, 0)
    del param
    param = groupProxyRead.getParam("filePremult")
    group.getParam("ProxyReadfilePremult").setAsAlias(param)
    del param
    param = groupProxyRead.getParam("outputPremult")
    group.getParam("ProxyReadoutputPremult").setAsAlias(param)
    del param
    param = groupProxyRead.getParam("outputComponents")
    group.getParam("ProxyReadoutputComponents").setAsAlias(param)
    del param
    param = groupProxyRead.getParam("frameRate")
    group.getParam("ProxyReadframeRate").setAsAlias(param)
    del param
    param = groupProxyRead.getParam("customFps")
    group.getParam("ProxyReadcustomFps").setAsAlias(param)
    del param
    param = groupProxyRead.getParam("ocioInputSpaceIndex")
    group.getParam("ProxyReadocioInputSpaceIndex").setAsAlias(param)
    del param
    param = groupProxyRead.getParam("ocioOutputSpaceIndex")
    group.getParam("ProxyReadocioOutputSpaceIndex").setAsAlias(param)
    del param
    param = groupifFormatOrRead.getParam("which")
    param.setExpression("thisGroup.modeChose.get()", False, 0)
    del param
    param = groupmainSwitch.getParam("which")
    param.setExpression("thisGroup.modeChose.get()", False, 0)
    del param

    try:
        extModule = sys.modules["Proxy_FileExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
