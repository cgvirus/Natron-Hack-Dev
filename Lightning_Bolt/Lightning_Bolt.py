# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named Lightning_BoltExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Lightning_BoltExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.LightningBolt"

def getLabel():
    return "Lightning_Bolt"

def getVersion():
    return 1

def getIconPath():
    return "bolticon.png"

def getGrouping():
    return "Community/Draw"

def getPluginDescription():
    return "A Simple Lightning Bolt Plugin"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)

    # Create the user parameters
    lastNode.Controler = lastNode.createPageParam("Controler", "Controls")
    param = lastNode.createDouble2DParam("rootposXY", "Root Pos.")
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(-1.79769e+308, 0)
    param.setDisplayMaximum(1.79769e+308, 0)
    param.setDefaultValue(160, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(-1.79769e+308, 1)
    param.setDisplayMaximum(1.79769e+308, 1)
    param.setDefaultValue(440, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(392, 0)
    param.setValue(681, 1)

    param.setUsePointInteract(True)

    lastNode.rootposXY = param
    del param

    param = lastNode.createDouble2DParam("tailposXY", "Tail Pos.")
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(-1.79769e+308, 0)
    param.setDisplayMaximum(1.79769e+308, 0)
    param.setDefaultValue(600, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(-1.79769e+308, 1)
    param.setDisplayMaximum(1.79769e+308, 1)
    param.setDefaultValue(200, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1046, 0)
    param.setValue(253, 1)

    param.setUsePointInteract(True)
    
    lastNode.tailposXY = param
    del param

    param = lastNode.createIntParam("Shadertoy1paramValueInt0", "Stroke Count")
    param.setMinimum(1, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueInt0 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat1", "Stroke Distance")
    param.setMinimum(0, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(0.83, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat1 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat2", "Randomize")
    param.setMinimum(0, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(0.26, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat2 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat3", "Flicker Rate")
    param.setMinimum(0, 0)
    param.setMaximum(20, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat3 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat4", "thresold")
    param.setMinimum(0, 0)
    param.setMaximum(99.99999999999999, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(99.99999999999999, 0)
    param.setDefaultValue(8.5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat4 = param
    del param

    param = lastNode.createColorParam("Shadertoy1paramValueVec35", "Color", False)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(0.6, 1)
    param.restoreDefaultValue(1)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.4220670461654663, 0)
    param.setValue(0.1338102221488953, 1)
    param.setValue(0.08025512844324112, 2)
    lastNode.Shadertoy1paramValueVec35 = param
    del param

    param = lastNode.createSeparatorParam("sep1", "")

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep1 = param
    del param

    param = lastNode.createBooleanParam("flip", "flip")

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.flip = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat7", "Cutoff")
    param.setMinimum(0, 0)
    param.setMaximum(300, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(300, 0)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat7 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat8", "Cutoff Feather")
    param.setMinimum(0.09999999999999999, 0)
    param.setMaximum(2, 0)
    param.setDisplayMinimum(0.09999999999999999, 0)
    param.setDisplayMaximum(2, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat8 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat9", "Cutoff Rotation")
    param.setMinimum(0, 0)
    param.setMaximum(359.9999999999999, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(359.9999999999999, 0)

    # Add the param to the page
    lastNode.Controler.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat9 = param
    del param

    lastNode.noiseparams = lastNode.createPageParam("noiseparams", "Noise Controls")
    param = lastNode.createDouble2DParam("noise_GeneratornoiseSize", "Noise Size")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(1000, 0)
    param.setDefaultValue(350, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setDisplayMinimum(1, 1)
    param.setDisplayMaximum(1000, 1)
    param.setDefaultValue(350, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.noise_GeneratornoiseSize = param
    del param

    param = lastNode.createDoubleParam("noise_GeneratornoiseZ", "Z0")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(5, 0)

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.noise_GeneratornoiseZ = param
    del param

    param = lastNode.createDoubleParam("noise_GeneratornoiseZSlope", "animated seed")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.noise_GeneratornoiseZSlope = param
    del param

    param = lastNode.createChoiceParam("noise_GeneratornoiseType", "Noise Type")
    param.setDefaultValue(2)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.noise_GeneratornoiseType = param
    del param

    param = lastNode.createIntParam("noise_GeneratorfbmOctaves", "Octaves")
    param.setMinimum(1, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(6, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.noise_GeneratorfbmOctaves = param
    del param

    param = lastNode.createDoubleParam("noise_GeneratorfbmLacunarity", "Lacunarity")
    param.setMinimum(1, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(2, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.noise_GeneratorfbmLacunarity = param
    del param

    param = lastNode.createDoubleParam("noise_GeneratorfbmGain", "Gain")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0.1, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.noise_GeneratorfbmGain = param
    del param

    param = lastNode.createSeparatorParam("sep2", "Only For vornoi type noise:")

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep2 = param
    del param

    param = lastNode.createChoiceParam("noise_GeneratorvoronoiType", "Voronoi Type")
    param.setDefaultValue(3)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.noise_GeneratorvoronoiType = param
    del param

    param = lastNode.createDoubleParam("noise_Generatorjitter", "Jitter")
    param.setMinimum(0.001, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0.001, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.192, 0)
    lastNode.noise_Generatorjitter = param
    del param

    param = lastNode.createDoubleParam("noise_GeneratorfbmScale", "FBM Scale")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.2, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.noiseparams.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.noise_GeneratorfbmScale = param
    del param

    lastNode.credit = lastNode.createPageParam("credit", "credit")
    param = lastNode.createSeparatorParam("plugname", "Lightning Bolt")

    # Add the param to the page
    lastNode.credit.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.plugname = param
    del param

    param = lastNode.createSeparatorParam("sp6", "")

    # Add the param to the page
    lastNode.credit.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sp6 = param
    del param

    param = lastNode.createSeparatorParam("dev", "Developed by Fahad Hasan Pathik (CGVIRUS)")

    # Add the param to the page
    lastNode.credit.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.dev = param
    del param

    param = lastNode.createSeparatorParam("sep4", "")

    # Add the param to the page
    lastNode.credit.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep4 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controler', 'noiseparams', 'credit', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Shadertoy1"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shadertoy1")
    lastNode.setLabel("Shadertoy1")
    lastNode.setPosition(699, 285)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShadertoy1 = lastNode

    param = lastNode.getParam("mousePosition")
    if param is not None:
        param.setValue(392, 0)
        param.setValue(681, 1)
        del param

    param = lastNode.getParam("mouseClick")
    if param is not None:
        param.setValue(1046, 0)
        param.setValue(253, 1)
        del param

    param = lastNode.getParam("mousePressed")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("paramValueInt0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat1")
    if param is not None:
        param.setValue(0.83, 0)
        del param

    param = lastNode.getParam("paramValueFloat2")
    if param is not None:
        param.setValue(0.26, 0)
        del param

    param = lastNode.getParam("paramValueFloat3")
    if param is not None:
        param.setValue(5, 0)
        del param

    param = lastNode.getParam("paramValueFloat4")
    if param is not None:
        param.setValue(8.5, 0)
        del param

    param = lastNode.getParam("paramValueVec35")
    if param is not None:
        param.setValue(0.4220670461654663, 0)
        param.setValue(0.1338102221488953, 1)
        param.setValue(0.08025512844324112, 2)
        del param

    param = lastNode.getParam("paramValueInt6")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueFloat7")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueFloat8")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("paramValueFloat9")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("imageShaderFileName")
    if param is not None:
        param.setValue("/home/production/Code_PRojects/Lightining/customs/Lightining wipe1.glsl")
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//Development by CGVIRUS under GNU GPL Version 3 Licence.\n//Simplex Lightning Bolt\n\n// iChannel0: Link Noise, filter=linear, wrap=clamp\n// BBox: iChannel0\n\n//Bolt Params\nuniform int strokecount = 1; // Stroke Count, min=1, max=10\nuniform float strokedist = 0.5; // Stroke Distance, min=0.0, max=10.0\nuniform float randomized = .33; // Randomize, min=0., max=10.\nuniform float flickerrate = 5.0; // Flicker Rate, min=0., max=20.\nuniform float thresold = 20.; // thresold , min=0., max=100.\nuniform vec3 LightColor = vec3(0.5,0.6,1.0); // Color\n\n//Cutoff parametres\nuniform int flip = 0; // Cutoff flip, min=0, max=1\nuniform float Transition = 0.0; // Cutoff, min=0.0, max=300\nuniform float Feather = 0.5; // Cutoff Feather, min=0.1, max=2\nuniform float rotation = .0; // Cutoff Rotation , min=0.,max=360.\n\nconst float PI = 3.14159265358979323846264;\nconst float TWOPI = 6.283185307179586476925286766559;\n\nfloat makewipe(vec2 uv, vec2 pos, float Transition)\n{\n    float rot = radians(rotation+45.0);\n\tmat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n   \tuv  = m*uv;\n    pos = m*pos;\n    \n  float main = uv.x+uv.y;\n  // float ang = atan(main.y, main.x);\n  float wipe = radians(Transition*TWOPI/9.5-100.0);\n  float f0 = 0.0;\n  if (flip == 0){\n  f0 = (main+wipe)/(PI*Transition*.01*(-Feather*PI));\n  }\n  else {\n  f0 = (-main+wipe)/(PI*Transition*.01*(-Feather*PI));\n  }\n  return clamp(f0,0.0,1.0);\n}\n\n//random number generator (simple)\nfloat rand(float n){\n    return fract(cos(n*89.42)*343.42);\n}\n\n//Finding distance between two mousepoints\nfloat dist(vec2 posxy, vec2 poszw, vec2 uv)\n{\n\tvec2 pa = uv - posxy, ba = poszw - posxy;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n//Creating strokes\nvec3 light(vec2 posxy, vec2 poszw, vec2 uv, vec4 noise)\n{\n\tfloat d = 1.0/dist( posxy, poszw+(noise.zw*noise.xy), uv)*(1.0/thresold*.1 *rand(iTime*flickerrate));\n\tvec3 col = vec3(0.0);\n    col = mix( col, LightColor, d*rand(iTime*flickerrate));\n\n    return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n\tuv.x *= iResolution.x/iResolution.y; //fix aspect ratio\n\tvec4 mouse = vec4(iMouse.xy/iResolution.xy - 0.5,iMouse.zw/iResolution.xy - 0.5);\n\tmouse.x *= iResolution.x/iResolution.y; //fix aspect ratio\n\tmouse.z *= iResolution.x/iResolution.y; //fix aspect ratio\n\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    vec4 linker = texture(iChannel0,xy);\n\n\tvec3 c = vec3(0.0,0.0,0.0);\n\n\tfor (int i=0; i<strokecount; i++){\n\t\t\n\t\tc += light( vec2(mouse.x,mouse.y), \n\t\t\tvec2(mouse.z-(i*rand(iTime*randomized))*strokedist,mouse.w), uv, linker );\n\t\t\n\t\tc += light( vec2(mouse.x,mouse.y), \n\t\t\tvec2(mouse.z+(i*rand(iTime*randomized))*strokedist,mouse.w), uv, linker );\n\n\t}\n\n\tfloat wipe = makewipe(uv, mouse.xy, Transition);\n\n\tfragColor = vec4( c, 1.0 )* vec4(vec3(wipe),1.0);\n}")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("Link Noise")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("strokecount")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Stroke Count")
        del param

    param = lastNode.getParam("paramDefaultInt0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinInt0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMaxInt0")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("strokedist")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Stroke Distance")
        del param

    param = lastNode.getParam("paramDefaultFloat1")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("paramMinFloat1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat1")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("randomized")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Randomize")
        del param

    param = lastNode.getParam("paramDefaultFloat2")
    if param is not None:
        param.setValue(0.33, 0)
        del param

    param = lastNode.getParam("paramMinFloat2")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat2")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("paramType3")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName3")
    if param is not None:
        param.setValue("flickerrate")
        del param

    param = lastNode.getParam("paramLabel3")
    if param is not None:
        param.setValue("Flicker Rate")
        del param

    param = lastNode.getParam("paramDefaultFloat3")
    if param is not None:
        param.setValue(5, 0)
        del param

    param = lastNode.getParam("paramMinFloat3")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat3")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("paramType4")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName4")
    if param is not None:
        param.setValue("thresold")
        del param

    param = lastNode.getParam("paramLabel4")
    if param is not None:
        param.setValue("thresold")
        del param

    param = lastNode.getParam("paramDefaultFloat4")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("paramMinFloat4")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat4")
    if param is not None:
        param.setValue(99.99999999999999, 0)
        del param

    param = lastNode.getParam("paramType5")
    if param is not None:
        param.set("vec3")
        del param

    param = lastNode.getParam("paramName5")
    if param is not None:
        param.setValue("LightColor")
        del param

    param = lastNode.getParam("paramLabel5")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("paramDefaultVec35")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.6, 1)
        param.setValue(1, 2)
        del param

    param = lastNode.getParam("paramType6")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName6")
    if param is not None:
        param.setValue("flip")
        del param

    param = lastNode.getParam("paramLabel6")
    if param is not None:
        param.setValue("Cutoff flip")
        del param

    param = lastNode.getParam("paramMinInt6")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt6")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType7")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName7")
    if param is not None:
        param.setValue("Transition")
        del param

    param = lastNode.getParam("paramLabel7")
    if param is not None:
        param.setValue("Cutoff")
        del param

    param = lastNode.getParam("paramMinFloat7")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat7")
    if param is not None:
        param.setValue(300, 0)
        del param

    param = lastNode.getParam("paramType8")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName8")
    if param is not None:
        param.setValue("Feather")
        del param

    param = lastNode.getParam("paramLabel8")
    if param is not None:
        param.setValue("Cutoff Feather")
        del param

    param = lastNode.getParam("paramDefaultFloat8")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("paramMinFloat8")
    if param is not None:
        param.setValue(0.09999999999999999, 0)
        del param

    param = lastNode.getParam("paramMaxFloat8")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("paramType9")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName9")
    if param is not None:
        param.setValue("rotation")
        del param

    param = lastNode.getParam("paramLabel9")
    if param is not None:
        param.setValue("Cutoff Rotation")
        del param

    param = lastNode.getParam("paramMinFloat9")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat9")
    if param is not None:
        param.setValue(359.9999999999999, 0)
        del param

    del lastNode
    # End of node "Shadertoy1"

    # Start of node "noise_Generator"
    lastNode = app.createNode("net.sf.openfx.SeNoise", 1, group)
    lastNode.setScriptName("noise_Generator")
    lastNode.setLabel("noise_Generator")
    lastNode.setPosition(522, 202)
    lastNode.setSize(80, 55)
    lastNode.setColor(0.75, 0.75, 0.75)
    groupnoise_Generator = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("noiseZSlope")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("voronoiType")
    if param is not None:
        param.set("type4")
        del param

    param = lastNode.getParam("jitter")
    if param is not None:
        param.setValue(0.192, 0)
        del param

    param = lastNode.getParam("fbmScale")
    if param is not None:
        param.setValue(0.2, 0)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "noise_Generator"

    # Start of node "Clamp1"
    lastNode = app.createNode("net.sf.openfx.Clamp", 2, group)
    lastNode.setScriptName("Clamp1")
    lastNode.setLabel("Clamp1")
    lastNode.setPosition(699, 380)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupClamp1 = lastNode

    param = lastNode.getParam("minClampToEnable")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("maxClampToEnable")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Clamp1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(510, 371)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("BChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(927, 369)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("BChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1067, 579)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "BG"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("BG")
    lastNode.setLabel("BG")
    lastNode.setPosition(927, 311)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupBG = lastNode

    del lastNode
    # End of node "BG"

    # Start of node "BG_Cloud_Optional"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("BG_Cloud_Optional")
    lastNode.setLabel("BG Cloud Optional")
    lastNode.setPosition(334, 211)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupBG_Cloud_Optional = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "BG_Cloud_Optional"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(510, 134)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Constant1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupShadertoy1.connectInput(0, groupMerge1)
    groupnoise_Generator.connectInput(0, groupConstant1)
    groupClamp1.connectInput(0, groupShadertoy1)
    groupMerge1.connectInput(0, groupBG_Cloud_Optional)
    groupMerge1.connectInput(1, groupnoise_Generator)
    groupMerge2.connectInput(0, groupBG)
    groupMerge2.connectInput(1, groupClamp1)
    groupOutput1.connectInput(0, groupMerge2)

    param = groupShadertoy1.getParam("mousePosition")
    group.getParam("rootposXY").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("mouseClick")
    group.getParam("tailposXY").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueInt0")
    group.getParam("Shadertoy1paramValueInt0").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueFloat1")
    group.getParam("Shadertoy1paramValueFloat1").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueFloat2")
    group.getParam("Shadertoy1paramValueFloat2").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueFloat3")
    group.getParam("Shadertoy1paramValueFloat3").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueFloat4")
    group.getParam("Shadertoy1paramValueFloat4").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueVec35")
    group.getParam("Shadertoy1paramValueVec35").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueInt6")
    param.setExpression("thisGroup.flip.get()", False, 0)
    del param
    param = groupShadertoy1.getParam("paramValueFloat7")
    group.getParam("Shadertoy1paramValueFloat7").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueFloat8")
    group.getParam("Shadertoy1paramValueFloat8").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueFloat9")
    group.getParam("Shadertoy1paramValueFloat9").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("noiseSize")
    group.getParam("noise_GeneratornoiseSize").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("noiseZ")
    group.getParam("noise_GeneratornoiseZ").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("noiseZSlope")
    group.getParam("noise_GeneratornoiseZSlope").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("noiseType")
    group.getParam("noise_GeneratornoiseType").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("voronoiType")
    group.getParam("noise_GeneratorvoronoiType").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("jitter")
    group.getParam("noise_Generatorjitter").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("fbmScale")
    group.getParam("noise_GeneratorfbmScale").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("fbmOctaves")
    group.getParam("noise_GeneratorfbmOctaves").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("fbmLacunarity")
    group.getParam("noise_GeneratorfbmLacunarity").setAsAlias(param)
    del param
    param = groupnoise_Generator.getParam("fbmGain")
    group.getParam("noise_GeneratorfbmGain").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["Lightning_BoltExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
